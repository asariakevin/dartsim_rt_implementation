model DartSim {
	class RandomSeed {
		protected attribute instance: `std::unique_ptr<RandomSeed>`[1]
		protected attribute uniform: `std::uniform_int_distribution<>`[1]
		protected attribute randomGenerator: `std::default_random_engine`[1]


		public operation RandomSeed():  `` `
			randomGenerator(std::random_device()())
		`

		public operation getInstance():  `RandomSeed&` `
			if (instance.get() == nullptr) {
				instance.reset(new RandomSeed);
			}
			return *instance;
		`

		public static operation getNextSeed():  `int` `
			return getInstance().getSeed();
		`

		public operation seed(seed: int[1]):  `void` `
			getInstance().randomGenerator.seed(seed);
		`

		public operation getSeed():  `int` `
			return uniform(randomGenerator);
		`

	}
		class Threat {
			protected attribute  range: double[1]
			protected attribute  destructionFormationFactor: double[1]
			protected attribute  uniform: `std::uniform_real_distribution<>`[1]
			protected attribute  randomGenerator: `std::default_random_engine`[1]

			public operation Threat(range: `double`[1], destructionFormationFactor: `double`[1]): `` `
			  range(range);
			  destructionFormationFactor(destructionFormationFactor);
			  randomGenerator(RandomSeed::getNextSeed());

			`

			public operation isDestroyed(threatEnv: `RealEnvironment`[1],config: `TeamConfiguration`[1], location: `Coordinate`[1]): `bool` `
					bool destroyed = false;
					bool threat = threatEnv.isObjectAt(location);
					if (threat) {
						double probOfDestruction = getProbabilityOfDestruction(config);

						double random = uniform(randomGenerator);
						destroyed = (random <= probOfDestruction);
					}
					return destroyed;
			`

			public operation getProbabilityOfDestruction(config: TeamConfiguration[1]): `double` `
					double probOfDestruction =
							((config.formation == TeamConfiguration::Formation::LOOSE) ? 1.0 : (1.0 / destructionFormationFactor))
							* max(0.0, range - config.altitudeLevel) / range;

					// ECM reduces the prob of destruction
					if (config.ecm) {
						probOfDestruction *= 0.25;
					}

					return probOfDestruction;
			`

		}

		class RealEnvironment {
			public operation  populate(size: Coordinate[1],numOfObjects: `unsigned`[1]): `void` `
					this->size = size;
					envMap.clear();

					std::default_random_engine gen(RandomSeed::getNextSeed());
					std::uniform_int_distribution<> unifX(0, size.x - 1);
					std::uniform_int_distribution<> unifY(0, size.y - 1);

					while (numOfObjects > 0) {
						unsigned x = unifX(gen);
						unsigned y = unifY(gen);
						while (envMap[Coordinate(x,y)]) {
							x = unifX(gen);
							y = unifY(gen);
						}
						envMap[Coordinate(x,y)] = true;
						numOfObjects--;
					}
			`
			public operation  getSize(): `Coordinate` `
					return size;
			`
			public operation  isObjectAt(location: Coordinate[1]): `bool` `
					bool isThere = false;
					const auto it = envMap.find(location);
					if (it != envMap.end()) {
						isThere = it->second;
					}

					return isThere;
			`
			public operation  setAt(location: Coordinate[1],  objectPresent: `bool`[1]): `void` `
					envMap[location] = objectPresent;
			`


			protected attribute  size: Coordinate[1]
			protected attribute  envMap: `std::map<Coordinate, bool>`
		}

	class Sensor {
		protected attribute fpr: `double`[1]
		protected attribute fnr: `double`[1]
		protected attribute uniform: `std::uniform_real_distribution`[1]
		protected attribute randomGenerator: `std::default_random_engine`[1]

		public operation Sensor(falsePositiveRate: `double`[1], falseNegativeRate: `double`[1]): `` `
			 fpr(falsePositiveRate);
			 fnr(falseNegativeRate);
			randomGenerator.seed(RandomSeed::getNextSeed());
		`
		public operation sense(truth: `bool`[1]): `bool` `
			bool result = truth;
			double random = uniform(randomGenerator);
			if (truth && random <= fnr) {
				result = false;
			} else if (!truth && random <= fpr) {
				result = true;
			}

			return result;
		`

	}
	class TargetSensor {
		protected attribute range: `double`[1]
		protected attribute detectionFormationFactor: `double`[1]
		protected attribute uniform: `std::uniform_real_distribution<>`[1]
		protected attribute randomGenerator: `std::default_random_engine`[1]

		public operation TargetSensor(range: `double`[1], detectionFormationFactor: `double`[1]): `` `
			  range(range);
			  detectionFormationFactor(detectionFormationFactor);
			  randomGenerator(RandomSeed::getNextSeed());
		`
		public operation sense(config: TeamConfiguration[1], targetPresent: `bool`[1]): `bool` `
			bool detected = false;
			if (targetPresent) {
				double probOfDetection = getProbabilityOfDetection(config);

				double random = uniform(randomGenerator);
				detected = (random <= probOfDetection);
			}
			return detected;
		`
		public operation getProbabilityOfDetection(config: TeamConfiguration[1]): `double` `
			double probOfDetection =
					((config.formation == TeamConfiguration::Formation::LOOSE) ? 1.0 : 1 / detectionFormationFactor)
					* max(0.0, range - config.altitudeLevel) / range;

			// ECM reduces the prob of detection
			if (config.ecm) {
				probOfDetection *= 0.25;
			}

			return probOfDetection;
		`


	}

	class DeterministicTargetSensor {
		protected attribute range: `double`[1]
		protected attribute detectionFormationFactor: `double`[1]
		protected attribute uniform: `std::uniform_real_distribution<>`[1]
		protected attribute randomGenerator: `std::default_random_engine`[1]

		public operation DeterministicTargetSensor(range: `double`[1], detectionFormationFactor: `double`[1]): `` `
			  range(range);
			  detectionFormationFactor(detectionFormationFactor);
			  randomGenerator(RandomSeed::getNextSeed());
		`
		public operation sense(config: TeamConfiguration[1], targetPresent: `bool`[1]): `bool` `
			bool detected = false;
			if (targetPresent) {
				double probOfDetection = getProbabilityOfDetection(config);

				double random = uniform(randomGenerator);
				detected = (random <= probOfDetection);
			}
			return detected;
		`
		public operation getProbabilityOfDetection(config: TeamConfiguration[1]): `double` `
			double effectiveRange = range;
			if (config.formation == TeamConfiguration::Formation::TIGHT) {
				effectiveRange = range / detectionFormationFactor;
			}

			// ECM reduces the range of detection
			if (config.ecm) {
				effectiveRange *= 0.75;
			}

			double probOfDetection = ((effectiveRange - config.altitudeLevel) > 0.0) ? 1.0 : 0.0;

			return probOfDetection;
		`


	}

    class Coordinate {
        public attribute x: int[1]
	    public attribute y: int[1]
    }
    class LongRangeSensorParams {
    	public attribute threatSensorFPR: `double`[1] = 0.10
    	public attribute threatSensorFNR: `double`[1] = 0.15
    	public attribute targetSensorFPR: `double`[1] = 0.10
    	public attribute targetSensorFNR: `double`[1] = 0.15
    }


		class DownwardLookingSensorParams {
			public attribute  targetDetectionFormationFactor: `double`[1] = 1.2
			public attribute  targetSensorRange: `unsigned`[1] = 4
		}

		class ThreatParams {
			public attribute  destructionFormationFactor: `double`[1] = 1.5
			public attribute  threatRange: `unsigned`[1] = 3 // in altitude levels
		}


		class SimulationParams {
			public attribute  mapSize: `unsigned`[1] = 40
			public attribute  squareMap: `bool`[1] = false
			public attribute  altitudeLevels: `unsigned`[1] = 4
			public attribute  changeAltitudeLatencyPeriods: `unsigned`[1] = 1
			public attribute  optimalityTest: `bool`[1] = false
			public attribute  longRangeSensor: `LongRangeSensorParams`[1]
			public attribute  downwardLookingSensor: `DownwardLookingSensorParams`[1]
			public attribute  threat: `ThreatParams`[1]
		}

		class SimulationResults {
			public attribute  destroyed: `bool`[1]
			public attribute  whereDestroyed: Coordinate[1]
			public attribute  targetsDetected: `unsigned`[1]
			public attribute  missionSuccess: `bool`[1]
			public attribute  decisionTimeAvg: `double`[1]
			public attribute  decisionTimeVar: `double`[1]
		}


		class TeamState {
			public attribute  position: Coordinate[1]
			public attribute  directionX: int[1]
			public attribute  directionY: int[1]
			public attribute  config: TeamConfiguration[1]
		}

		class Formation {
			public attribute LOOSE: int[1] = 0
			public attribute TIGHT: int[1] = 1

		}

		class TeamConfiguration {

			public attribute  altitudeLevel: `unsigned`[1]
			public attribute  formation: Formation[1]
			public attribute  ecm: `bool`[1]
			public attribute  ttcIncAlt: `unsigned`[1]
			public attribute  ttcDecAlt: `unsigned`[1]
			public attribute  ttcIncAlt2: `unsigned`[1]
			public attribute  ttcDecAlt2: `unsigned`[1]
		}
	
	class TacticList {
		public attribute tacticList: `std::set<std::string>`[1]
	}
		class Route  {
			protected attribute coordinates: `std::vector<Coordinate>`[1]
			public operation Route(origin: Coordinate[1], directionX: double[1], directionY: double[1], length: `unsigned`[1]): `` `
					// operate in doubles so that fractional directions can be used
					double x = origin.x;
					double y = origin.y;

					while (length > 0) {
						coordinates.push_back(Coordinate(x, y));
						x += directionX;
						y += directionY;
						length--;
					}
			` 
		}
		class SimulatorImpl { 
			public attribute  params: SimulationParams[1]
			public attribute  threatEnv: RealEnvironment[1]
			public attribute  targetEnv: RealEnvironment[1]
			public attribute  route: Route[1]

			public attribute screen: `std::vector<std::vector<char> >`[1]
			public attribute screenPosition: `unsigned`[1] = 0
			public attribute decisionTimeStats: Stats[1]
			public attribute currentConfig: TeamConfiguration[1]
			public attribute targetsDetected: `unsigned`[1] = 0
			public attribute destroyed: `bool`[1] = false

			public attribute routeIt: `vector<Coordinate>::const_iterator`[1] 

			public attribute changeAltitudeLatencyPeriods: `unsigned`[1]

			// TODO this may be removed and use only routeIt instead
			public attribute position: Coordinate[1] /**< current team position */


			public attribute MISSION_SUCCESS_THRESHOLD: `unsigned`[1]

			public attribute SCREEN_THREATS: int[1]
			public attribute SCREEN_TARGETS: int[1]

			public attribute directionX: int[1] = 0 /**< -1, 0 or +1 to indicate the horizontal direction of travel */
			public attribute directionY: int[1] = 0 /**< -1, 0 or +1 to indicate the vertical direction of travel */

			public operation SimulatorImpl(simParams: SimulationParams[1],
					threatEnv: RealEnvironment[1],
					targetEnv: RealEnvironment[1],
					route: Route[1],
					missionSuccessTargetThreshold: `unsigned`[1]): `` `
				  params(simParams);
				  threatEnv(threatEnv);
				  targetEnv(targetEnv);
				  route(route); // TODO: change where route is used to use coordinates
				  screen(route.size(), vector<char>(simParams.altitudeLevels + 2, ' '));
				  currentConfig({simParams.altitudeLevels, TeamConfiguration::Formation::LOOSE, false, 0, 0, 0, 0});
				  routeIt(this->route.begin());
				  changeAltitudeLatencyPeriods(simParams.changeAltitudeLatencyPeriods);
				  position(*routeIt);
				  MISSION_SUCCESS_THRESHOLD(missionSuccessTargetThreshold);
				  SCREEN_THREATS(simParams.altitudeLevels);
				  SCREEN_TARGETS(simParams.altitudeLevels + 1;
			
			
				/* create simulators of target sensors and threats */
				pTargetSensor = createTargetSensor(simParams);
				pThreatSim = createThreatSim(simParams);
			
				/* create forward-looking sensors */
				pFwdThreatSensor = make_unique<Sensor>(simParams.longRangeSensor.threatSensorFPR,
						simParams.longRangeSensor.threatSensorFNR);
				pFwdTargetSensor = make_unique<Sensor>(simParams.longRangeSensor.targetSensorFPR,
						simParams.longRangeSensor.targetSensorFNR);
			
				updateDirection();
			
				/* initialize screen */
				for (unsigned p = 0; p < route.size(); p++) {
					for (unsigned h = 0; h < simParams.altitudeLevels; h++) {
						screen[p][h] = ' ';
					}
					if (threatEnv.isObjectAt(route.at(p))) {
						screen[p][SCREEN_THREATS] = '^';
					} else {
						screen[p][SCREEN_THREATS] = ' ';
					}
					if (targetEnv.isObjectAt(route.at(p))) {
						screen[p][SCREEN_TARGETS] = 'T';
					} else {
						screen[p][SCREEN_TARGETS] = ' ';
					}
				}
			
			


			`
			
			public operation getParameters(): `SimulationParams` `
				return params;
			`     
			
			shared_ptr<Threat> SimulatorImpl::createThreatSim(const SimulationParams& simParams) {
				shared_ptr<Threat> pThreatSim;
				if (simParams.optimalityTest) {
					pThreatSim = make_shared<DeterministicThreat>(
							simParams.threat.threatRange,
							simParams.threat.destructionFormationFactor);
				} else {
					pThreatSim = make_shared<Threat>(
							simParams.threat.threatRange,
							simParams.threat.destructionFormationFactor);
				}
				return pThreatSim;
			}
			
			shared_ptr<TargetSensor> SimulatorImpl::createTargetSensor(const SimulationParams& simParams) {
				shared_ptr<TargetSensor> pTargetSensor;
				if (simParams.optimalityTest) {
					pTargetSensor = make_shared<DeterministicTargetSensor>(
							simParams.downwardLookingSensor.targetSensorRange,
							simParams.downwardLookingSensor.targetDetectionFormationFactor);
				} else {
					pTargetSensor = make_shared<TargetSensor>(
							simParams.downwardLookingSensor.targetSensorRange,
							simParams.downwardLookingSensor.targetDetectionFormationFactor);
				}
				return pTargetSensor;
			}
			
			bool SimulatorImpl::finished() const {
				return destroyed || routeIt == route.end();
			}
			
			public operation getResults(): `SimulationResults` `
				SimulationResults results;
				results.destroyed = destroyed;
				results.targetsDetected = targetsDetected;
				results.whereDestroyed = position;
				results.missionSuccess = !destroyed && targetsDetected >= MISSION_SUCCESS_THRESHOLD;
				results.decisionTimeAvg = boost::accumulators::mean(decisionTimeStats);
				results.decisionTimeVar = boost::accumulators::moment<2>(decisionTimeStats);
				return results;
			`
			
			TeamState SimulatorImpl::getState() {
				TeamState state;
				state.position = position;
				state.config = currentConfig;
				state.directionX = directionX;
				state.directionY = directionY;
				return state;
			}
			
			std::vector<bool> SimulatorImpl::readForwardSensor(const RealEnvironment& environment,
					Sensor* pSensor, unsigned cells) {
				std::vector<bool> sensed;
			
				// compute forward sensing route
				Route route(position, directionX, directionY, cells);
			
				for (const auto& pos : route) {
					if (pos.isInsideRect(environment.getSize())) {
						sensed.push_back(pSensor->sense(environment.isObjectAt(pos)));
					} else {
						break; // the route is a straight line and the environment is convex
					}
				}
			
				return sensed;
			}
			
			
			std::vector<bool> SimulatorImpl::readForwardThreatSensor(
					unsigned cells) {
				return readForwardSensor(threatEnv, pFwdThreatSensor.get(), cells);
			}
			
			std::vector<bool> SimulatorImpl::readForwardTargetSensor(
					unsigned cells) {
				return readForwardSensor(targetEnv, pFwdTargetSensor.get(), cells);
			}
			
			std::vector<std::vector<bool>> SimulatorImpl::readForwardSensor(const RealEnvironment& environment,
					Sensor* pSensor, unsigned cells, unsigned numOfObservations) {
				std::vector<std::vector<bool>> sensed;
			
				// compute forward sensing route
				Route route(position, directionX, directionY, cells);
			
				for (const auto& pos : route) {
					if (pos.isInsideRect(environment.getSize())) {
						std::vector<bool> values;
						for (unsigned c = 0; c < numOfObservations; c++) {
							values.push_back(pSensor->sense(environment.isObjectAt(pos)));
						}
						sensed.push_back(values);
					} else {
						break; // the route is a straight line and the environment is convex
					}
				}
			
				return sensed;
			}
			
			
			std::vector<std::vector<bool>> SimulatorImpl::readForwardThreatSensor(unsigned cells, unsigned numOfObservations) {
				return readForwardSensor(threatEnv, pFwdThreatSensor.get(), cells, numOfObservations);
			}
			
			std::vector<std::vector<bool>> SimulatorImpl::readForwardTargetSensor(unsigned cells, unsigned numOfObservations) {
				return readForwardSensor(targetEnv, pFwdTargetSensor.get(), cells, numOfObservations);
			}
			
			void SimulatorImpl::updateDirection() {
				directionX = 0;
				directionY = 0;
				if (routeIt != route.end()) {
					auto nextPos = routeIt + 1;
					directionX = nextPos->x - position.x;
					directionY = nextPos->y - position.y;
				}
			}
			
			bool SimulatorImpl::step(const TacticList& tactics, double decisionTimeMsec) {
				bool targetDetectedInThisStep = false;
				if (finished()) {
					return targetDetectedInThisStep;
				}
			
				// collect decision time
				decisionTimeStats(decisionTimeMsec);
			
				for (auto tactic : tactics) {
					currentConfig = executeTactic(tactic, currentConfig);
				}
			
				/* update display */
				screen[screenPosition][currentConfig.altitudeLevel - 1] =
						(currentConfig.formation
								== TeamConfiguration::Formation::LOOSE) ?
								(currentConfig.ecm ? '@' : '#') :
								(currentConfig.ecm ? '0' : '*');
			
				/* simulate threats */
				destroyed = pThreatSim->isDestroyed(threatEnv, currentConfig, position);
				if (destroyed) {
					cout << "Team destroyed at position " << position << endl;
					return targetDetectedInThisStep;
				}
			
				/* simulate target detection */
				if (pTargetSensor->sense(currentConfig, targetEnv.isObjectAt(position))) {
					cout << "Target detected at " << position << endl;
					targetsDetected++;
					targetDetectedInThisStep = true;
					screen[screenPosition][SCREEN_TARGETS] = 'X';
				}
			
				/* system evolution */
				routeIt++;
				if (routeIt != route.end()) {
					position = *routeIt;
				}
				updateDirection();
				screenPosition++;
			
				/* update tactic progress */
				auto ttcIncAlt = currentConfig.ttcIncAlt;
				if (ttcIncAlt > 0) {
					currentConfig.ttcIncAlt = --ttcIncAlt;
					if (ttcIncAlt == 0) {
						currentConfig.altitudeLevel = currentConfig.altitudeLevel + 1;
					}
				}
			
				auto ttcDecAlt = currentConfig.ttcDecAlt;
				if (ttcDecAlt > 0) {
					currentConfig.ttcDecAlt = --ttcDecAlt;
					if (ttcDecAlt == 0) {
						currentConfig.altitudeLevel = currentConfig.altitudeLevel - 1;
					}
				}
			
				auto ttcIncAlt2 = currentConfig.ttcIncAlt2;
				if (ttcIncAlt2 > 0) {
					currentConfig.ttcIncAlt2 = --ttcIncAlt2;
					if (ttcIncAlt2 == 0) {
						currentConfig.altitudeLevel = currentConfig.altitudeLevel + 2;
					}
				}
			
				auto ttcDecAlt2 = currentConfig.ttcDecAlt2;
				if (ttcDecAlt2 > 0) {
					currentConfig.ttcDecAlt2 = --ttcDecAlt2;
					if (ttcDecAlt2 == 0) {
						currentConfig.altitudeLevel = currentConfig.altitudeLevel - 2;
					}
				}
			
				return targetDetectedInThisStep;
			}
			
			TeamConfiguration SimulatorImpl::executeTactic(string tactic, const TeamConfiguration& config) {
				auto newConfig = config;
				cout << "executing tactic " << tactic << endl;
				if (tactic == INC_ALTITUDE) {
					if (changeAltitudeLatencyPeriods > 0) {
						newConfig.ttcIncAlt = changeAltitudeLatencyPeriods;
					} else {
						newConfig.altitudeLevel = newConfig.altitudeLevel + 1;
					}
				} else if (tactic == DEC_ALTITUDE) {
					if (changeAltitudeLatencyPeriods > 0) {
						newConfig.ttcDecAlt = changeAltitudeLatencyPeriods;
					} else {
						newConfig.altitudeLevel = newConfig.altitudeLevel - 1;
					}
				} else if (tactic == INC_ALTITUDE2) {
					if (changeAltitudeLatencyPeriods > 0) {
						newConfig.ttcIncAlt2 = changeAltitudeLatencyPeriods;
					} else {
						newConfig.altitudeLevel = newConfig.altitudeLevel + 2;
					}
				} else if (tactic == DEC_ALTITUDE2) {
					if (changeAltitudeLatencyPeriods > 0) {
						newConfig.ttcDecAlt2 = changeAltitudeLatencyPeriods;
					} else {
						newConfig.altitudeLevel = newConfig.altitudeLevel - 2;
					}
				} else if (tactic == GO_TIGHT) {
					newConfig.formation = TeamConfiguration::Formation::TIGHT;
				} else if (tactic == GO_LOOSE) {
					newConfig.formation = TeamConfiguration::Formation::LOOSE;
				} else if (tactic == ECM_ON) {
					newConfig.ecm = true;
				} else if (tactic == ECM_OFF) {
					newConfig.ecm = false;
				} else {
					throw std::runtime_error(string("unknown tactic ") + tactic);
				}
				return newConfig;
			}
			
			
			public operation getScreenOutput(): `std::string` `
				ostringstream out;
				for (int h = SCREEN_THREATS; h > 0 ; h--) {
					for (unsigned p = 0; p < screen.size(); p++) {
						out << screen[p][h - 1];
					}
					out << endl;
				}
				for (int h = SCREEN_THREATS; h < SCREEN_THREATS + 2; h++) {
					for (unsigned p = 0; p < screen.size(); p++) {
						out << screen[p][h];
					}
					out << endl;
				}
				return out.str();
			`
		}

	protocol AdapterInterfaceToSimulatorProtocol {
		out message isFinished()
		out message readForwardThreatSensor(cells: `unsigned`[1])
		out message readForwardTargetSensor(cells: `unsigned`[1])
		out message readForwardThreatSensorForObservation(cells: `unsigned`[1], numOfObservations: `unsigned`[1])
		out message readForwardTargetSensorForObservation(cells: `unsigned`[1], numOfObservations: `unsigned`[1])
		out message step(tactics: TacticList[1], decisionTimeMsec: double[1]) // decisionTimeMsec defualts to 0
		out message getResults()
		out message getScreenOutput()
		out message getParameters()
		out message getState()
		out message createSimulator(argc: int[1], argv: `char**`)


		in message sendIsFinished(finished: `bool`[1])
		in message sendReadForwardThreatSensor(readings: `std::vector<bool>`[1])
		in message sendReadForwardTargetSensor(readings: `std::vector<bool>`[1])
		in message sendReadForwardThreatSensorForObservation(readings: `std::vector<std::vector<bool>>`[1])
		in message sendReadForwardTargetSensorForObservation(readings: `std::vector<std::vector<bool>>`[1])
		in message sendStep(detection: `bool`[1]) 
		in message sendResults(simulationResults: SimulationResults[1])
		in message sendScreenOutput(screenOutput: `string`[1])
		in message sendParameters(simulationParams: SimulationParams[1])
		in message sendState(teamState: TeamState[1])
	}

	protocol SimulatorToForwardTargetSensor {
		out message createForwardTargetSensor(simulatorParams: SimulationParams[1])
		out message readForwardTargetSensor()

		in message sendReadForwardTargetSensor(sensedForwardTargetSensor: `bool`[1])

	}
	
	capsule AdapterInterface {
		port adapterManagerPort: ~AdapterInterfaceToSimulatorProtocol
		port log: RTSLibrary.Log
		port adapterInterfaceToSimulatorPort: AdapterInterfaceToSimulatorProtocol

		statemachine {
				initial initialStateAdapterInterfaceCapsule
				state running

				transition {
					from initialStateAdapterInterfaceCapsule
					to running
					action `
						log.log("[AdapterInterface] from initial state to running state");
					`
				}
		}	
		



	}

	capsule Simulator {
		port adapterInterfacePort: ~AdapterInterfaceToSimulatorProtocol
		port simulatorToForwardTargetSensorPort: ~SimulatorToForwardTargetSensor
		port log: RTSLibrary.Log
		protected attribute simulatorImp: SimulatorImpl[1]

		statemachine {
				initial initialStateSimulatorCapsule
				state waiting
				state running

				// TODO: read documentation to see what the commandline arguments are

				transition {
					from initialStateSimulatorCapsule
					to waiting
					action `
						log.log("[Simulator] from initial state to waiting state");
					`
				}
				transition {
					from waiting
					to running
					triggers from adapterInterfacePort on createSimulator //TODO: add corresponding sent message in adapter interface with correct arguments
					action `
							log.log("[Simulator] from initial state to running state");
							SimulationParams simParams;
							bool autoRange = false;
							unsigned numThreats = 6;
							unsigned numTargets = 4;

							// split options
							int simArgc = 0;

							while (simArgc < argc) {
								if (strcmp(argv[simArgc++], "--") == 0) {
									simArgc--;
									argv[simArgc] = nullptr;
									break;
								}
							}

							while (1) {
								int option_index = 0;

								auto c = getopt_long(simArgc, argv, "", long_options, &option_index);

								if (c == -1) {
									break;
								}

								switch (c) {
								case MAP_SIZE:
									simParams.mapSize = atoi(optarg);
									break;
								case SQUARE_MAP:
									simParams.squareMap = true;
									break;
								case NUM_TARGETS:
									numTargets = atoi(optarg);
									break;
								case NUM_THREATS:
									numThreats = atoi(optarg);
									break;
								case ALTITUDE_LEVELS:
									simParams.altitudeLevels = atoi(optarg);
									break;
								case THREAT_RANGE:
									simParams.threat.threatRange = atoi(optarg);
									break;
								case THREAT_SENSOR_FPR:
									simParams.longRangeSensor.threatSensorFPR = atof(optarg);
									break;
								case THREAT_SENSOR_FNR:
									simParams.longRangeSensor.threatSensorFNR = atof(optarg);
									break;
								case TARGET_SENSOR_FPR:
									simParams.longRangeSensor.targetSensorFPR = atof(optarg);
									break;
								case TARGET_SENSOR_FNR:
									simParams.longRangeSensor.targetSensorFNR = atof(optarg);
									break;
								case DL_TARGET_SENSOR_RANGE:
									simParams.downwardLookingSensor.targetSensorRange = atoi(optarg);
									break;
								case AUTO_RANGE:
									autoRange = true;
									break;
								case CHANGE_ALT_LATENCY_PERIODS:
									simParams.changeAltitudeLatencyPeriods = atoi(optarg);
									break;
								case SEED:
									dart::sim::RandomSeed::seed(atoi(optarg));
									break;
								case OPT_TEST:
									simParams.optimalityTest = true;
									break;
								default:
									return nullptr;
								}
							}

							if (optind < simArgc) {
								return nullptr;
							}

							if (autoRange) {
								simParams.downwardLookingSensor.targetSensorRange = simParams.altitudeLevels;
								simParams.threat.threatRange = simParams.altitudeLevels * 3 / 4;
							}

							if (numTargets > simParams.mapSize) {
								cout << "error: number of targets cannot be larger than map size" << endl;
								return nullptr;
							}

							if (numThreats > simParams.mapSize) {
								cout << "error: number of threats cannot be larger than map size" << endl;
								return nullptr;
							}


							// generate environment
						#if FIXED2DSPACE
							RealEnvironment threatEnv;
							threatEnv.populate(Coordinate(10, 10), 0);

							RealEnvironment targetEnv;
							targetEnv.populate(Coordinate(10, 10), 0);

							threatEnv.setAt(Coordinate(2,2), true);
							threatEnv.setAt(Coordinate(3,2), true);
							threatEnv.setAt(Coordinate(6,6), true);
							threatEnv.setAt(Coordinate(7,7), true);

							targetEnv.setAt(Coordinate(5,2), true);
							targetEnv.setAt(Coordinate(7,2), true);
							targetEnv.setAt(Coordinate(7,5), true);
						#else
							RealEnvironment threatEnv;
							RealEnvironment targetEnv;

							if (simParams.squareMap) {

								/* generate true environment */
								threatEnv.populate(dart::sim::Coordinate(simParams.mapSize, simParams.mapSize), numThreats);
								targetEnv.populate(dart::sim::Coordinate(simParams.mapSize, simParams.mapSize), numTargets);
							} else {

								/* generate true environment */
								threatEnv.populate(dart::sim::Coordinate(simParams.mapSize, 1), numThreats);
								targetEnv.populate(dart::sim::Coordinate(simParams.mapSize, 1), numTargets);
							}
						#endif


							// generate route
							//TODO: change route to use coordinates
							Route route;

						#if FIXED2DSPACE
							unsigned x = 2;
							unsigned y = 2;
							while (x < 7) {
								route.push_back(Coordinate(x,y));
								x++;
							}
							while (y <= 6) {
								route.push_back(Coordinate(x,y));
								y++;
							}
						#else
							if (simParams.squareMap) {
								for (unsigned y = 0; y < simParams.mapSize; y++) {
									if (y % 2) {
										for (unsigned x = simParams.mapSize; x > 0; x--) {
											route.push_back(dart::sim::Coordinate(x - 1, y));
										}
									} else {
										for (unsigned x = 0; x < simParams.mapSize; x++) {
											route.push_back(dart::sim::Coordinate(x, y));
										}
									}
								}
							} else {
								route = Route(Coordinate(0,0), 1.0, 0.0, simParams.mapSize);
							}
						#endif

							// change parameters if doing optimality test
							if (simParams.optimalityTest) {
								simParams.longRangeSensor.targetSensorFNR = 0;
								simParams.longRangeSensor.targetSensorFPR = 0;
								simParams.longRangeSensor.threatSensorFNR = 0;
								simParams.longRangeSensor.threatSensorFPR = 0;

								// autorange
								simParams.downwardLookingSensor.targetSensorRange = simParams.altitudeLevels / 2.0;
								simParams.threat.threatRange = simParams.altitudeLevels * 3.0 / 4;
								cout << "ranges sensor=" << simParams.downwardLookingSensor.targetSensorRange
										<< " threat=" << simParams.threat.threatRange << endl;
							}


							// instantiate adaptation manager
							// replace seeds that would have been consumed by the sensor and threat used in the old utility fc
							RandomSeed::getNextSeed();
							RandomSeed::getNextSeed();
							RandomSeed::getNextSeed();
							RandomSeed::getNextSeed();

							unsigned missionSuccessTargetThreshold = numTargets / 2.0;
							simulatorImp = new SimulatorImpl(simParams, threatEnv, targetEnv,
									route, missionSuccessTargetThreshold);

							//TODO: start sensors
					`
				}
				transition {
					from running
					to running
					triggers from adapterInterfacePort on readForwardTargetSensor
					action `
						log.log("[Simulator] (readForwardTargetSensor)");
					`
				}
		}	

	}

	capsule ForwardTargetSensor {
		port simulatorPort: ~SimulatorToForwardTargetSensor
		port log: RTSLibrary.Log

		statemachine {
			initial initialStateForwardTargetSensor
			state waitingStateForwardTargetSensor
			state runningForwardTargetSensor

				transition {
					from initialStateForwardTargetSensor
					to waitingStateForwardTargetSensor
					action `
						log.log("[ForwardTargetSensor] from initial state to waiting state");
					`
				}

				transition {
					from waitingStateForwardTargetSensor
					to runningForwardTargetSensor
					triggers from simulatorPort on createForwardTargetSensor
					action `
						log.log("[ForwardTargetSensor] from waiting state to running state");
					`
				}

		}
			


	}
	top capsule Top {
		part forwardTargetSensor : ForwardTargetSensor
		part adapterInterface : AdapterInterface
	}
}
